# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - test
  - quality_gate
  # - build
  - deploy

variables:
  GIT_STRATEGY: fetch

# Job Definitions
test_frontend:
  stage: test
  image: node:20
  script:
    - cd code/frontend
    - npm i
    - npm run coverage
  artifacts:
    paths:
      - 'code/frontend/coverage/'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: 'code/frontend/coverage/cobertura-coverage.xml'

test_backend:
  stage: test
  image: python:3.11-bookworm
  before_script:
    - curl -sSL https://install.python-poetry.org | python3 -
    - export PATH="$HOME/.local/bin:$PATH"
    - export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring
  script:
    - cd code/backend
    - poetry install
    - poetry run tests
  allow_failure: true

sonarqube_check:
  stage: quality_gate
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: ['']
  needs:
    - job: test_frontend
      artifacts: true
    - job: test_backend
      artifacts: true
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - main

# build_frontend:
#   stage: build
#   script:
#     - cd code/frontend
#     - npm install
#     - npm run build

deploy_to_production:
  stage: deploy
  script:
    - echo "Deploying!"
  only:
    - main
